import Puzzle23.Field
import org.fest.assertions.Assertions.assertThat
import org.junit.jupiter.api.Test

class Puzzle23Test : BaseTestCase<Int>() {

    override fun expectedBaseTestCaseResult(): Int {
        return 110
    }

    override fun instantiate(): Puzzle<Int> {
        return Puzzle23()
    }

    @Test
    fun testRoundsFromMiniExample() {
        val field = Puzzle23().initialize(
            """
            .....
            ..##.
            ..#..
            .....
            ..##.
            .....
        """.trimIndent().split("\n")
        )

        assertThat(toString(field)).isEqualTo(
            """
            .....
            ..##.
            ..#..
            .....
            ..##.
            .....
        """.trimIndent()
        )

        field.executeRound()

        assertThat(toString(field)).isEqualTo(
            """
            ..##.
            .....
            ..#..
            ...#.
            ..#..
            .....
        """.trimIndent()
        )

    }

    @Test
    fun testRounds() {
        val field = Puzzle23().initialize(readLines())

        assertThat(toString(field)).isEqualTo(
            """
            ..............
            ..............
            .......#......
            .....###.#....
            ...#...#.#....
            ....#...##....
            ...#.###......
            ...##.#.##....
            ....#..#......
            ..............
            ..............
            ..............
        """.trimIndent()
        )

        // Round 1, pref S
        field.executeRound()

        assertThat(toString(field)).isEqualTo(
            """
            ..............
            .......#......
            .....#...#....
            ...#..#.#.....
            .......#..#...
            ....#.#.##....
            ..#..#.#......
            ..#.#.#.##....
            ..............
            ....#..#......
            ..............
            ..............
        """.trimIndent()
        )

        // Round 2, pref S
        field.executeRound()

        assertThat(toString(field)).isEqualTo(
            """
            ..............
            .......#......
            ....#.....#...
            ...#..#.#.....
            .......#...#..
            ...#..#.#.....
            .#...#.#.#....
            ..............
            ..#.#.#.##....
            ....#..#......
            ..............
            ..............
        """.trimIndent()
        )

        // Round 3
        field.executeRound()

        assertThat(toString(field)).isEqualTo(
            """
            ..............
            .......#......
            .....#....#...
            ..#..#...#....
            .......#...#..
            ...#..#.#.....
            .#..#.....#...
            .......##.....
            ..##.#....#...
            ...#..........
            .......#......
            ..............
        """.trimIndent()
        )

        // Round 4
        field.executeRound()

        assertThat(toString(field)).isEqualTo(
            """
            ..............
            .......#......
            ......#....#..
            ..#...##......
            ...#.....#.#..
            .........#....
            .#...###..#...
            ..#......#....
            ....##....#...
            ....#.........
            .......#......
            ..............
        """.trimIndent()
        )

        // Round 5
        field.executeRound()

        assertThat(toString(field)).isEqualTo(
            """
            .......#......
            ..............
            ..#..#.....#..
            .........#....
            ......##...#..
            .#.#.####.....
            ...........#..
            ....##..#.....
            ..#...........
            ..........#...
            ....#..#......
            ..............
        """.trimIndent()
        )

        // Round 10
        repeat(5) {
            field.executeRound()
        }

        assertThat(toString(field)).isEqualTo(
            """
            .......#......
            ...........#..
            ..#.#..#......
            ......#.......
            ...#.....#..#.
            .#......##....
            .....##.......
            ..#........#..
            ....#.#..#....
            ..............
            ....#..#..#...
            ..............
        """.trimIndent()
        )


    }

    private fun toString(field: Field): String {
        val retVal = field.toStringForInitialSize().trim()
//        println("---")
//        println(retVal)
//        println("---")
        return retVal
    }
}
